version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg17
    container_name: knowledge_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: knowledge_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - knowledge_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: rag_pgvector_app
    environment:
      - APP_NAME=${APP_NAME}
      - APP_PORT=${APP_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - VECTOR_DIMENSION=${VECTOR_DIMENSION}
    ports:
      - "8000:8000"
    volumes:
      - ../logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - knowledge_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  knowledge_network:
    driver: bridge